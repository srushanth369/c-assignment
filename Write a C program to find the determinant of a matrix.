#include <stdio.h>

#define MAX 10  // Maximum size of the matrix

// Function to calculate the determinant of a matrix
int determinant(int matrix[MAX][MAX], int n) {
    int det = 0;

    // Base case: if the matrix is 2x2
    if (n == 2) {
        det = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];
        return det;
    }

    // For larger matrices, calculate determinant using cofactor expansion
    for (int i = 0; i < n; i++) {
        int temp[MAX][MAX];
        int m = 0, k = 0;

        // Create the submatrix by excluding the current row and column
        for (int j = 1; j < n; j++) {
            for (int l = 0; l < n; l++) {
                if (l != i) {
                    temp[m][k++] = matrix[j][l];
                }
            }
            m++;
            k = 0;
        }

        // Calculate the determinant recursively using cofactor expansion
        det += matrix[0][i] * (i % 2 == 0 ? 1 : -1) * determinant(temp, n - 1);
    }

    return det;
}

// Function to print a matrix
void printMatrix(int matrix[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int matrix[MAX][MAX], n;

    // Get the size of the matrix (n x n)
    printf("Enter the size of the matrix (n x n): ");
    scanf("%d", &n);

    // Ensure it's a square matrix
    if (n > MAX) {
        printf("Matrix size exceeds the maximum allowed size of %d x %d.\n", MAX, MAX);
        return -1;
    }

    // Get the elements of the matrix
    printf("Enter the elements of the matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &matrix[i][j]);
        }
    }

    // Print the matrix
    printf("\nMatrix:\n");
    printMatrix(matrix, n);

    // Calculate and print the determinant
    int det = determinant(matrix, n);
    printf("\nDeterminant of the matrix: %d\n", det);

    return 0;
}
