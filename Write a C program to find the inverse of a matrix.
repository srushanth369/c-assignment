#include <stdio.h>

#define MAX 10  // Maximum size of the matrix

// Function to calculate the determinant of a matrix
int determinant(int matrix[MAX][MAX], int n) {
    int det = 0;

    // Base case: if the matrix is 2x2
    if (n == 2) {
        det = matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];
        return det;
    }

    // For larger matrices, calculate determinant using cofactor expansion
    for (int i = 0; i < n; i++) {
        int temp[MAX][MAX];
        int m = 0, k = 0;

        // Create the submatrix by excluding the current row and column
        for (int j = 1; j < n; j++) {
            for (int l = 0; l < n; l++) {
                if (l != i) {
                    temp[m][k++] = matrix[j][l];
                }
            }
            m++;
            k = 0;
        }

        // Calculate the determinant recursively using cofactor expansion
        det += matrix[0][i] * (i % 2 == 0 ? 1 : -1) * determinant(temp, n - 1);
    }

    return det;
}

// Function to find the adjoint of a matrix
void adjoint(int matrix[MAX][MAX], int adj[MAX][MAX], int n) {
    if (n == 1) {
        adj[0][0] = 1;
        return;
    }

    int temp[MAX][MAX];

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            // Get the cofactor of matrix[i][j]
            getCofactor(matrix, temp, 0, i, j, n);
            // Sign of the cofactor is (+/- 1)
            adj[j][i] = ((i + j) % 2 == 0 ? 1 : -1) * determinant(temp, n - 1);
        }
    }
}

// Function to get the cofactor of a matrix
void getCofactor(int matrix[MAX][MAX], int temp[MAX][MAX], int p, int q, int n) {
    int i = 0, j = 0;

    // Loop through each element of the matrix
    for (int row = 0; row < n; row++) {
        for (int col = 0; col < n; col++) {
            if (row != p && col != q) {
                temp[i][j++] = matrix[row][col];

                // If the column is filled, move to next row
                if (j == n - 1) {
                    j = 0;
                    i++;
                }
            }
        }
    }
}

// Function to find the inverse of a matrix
int inverse(int matrix[MAX][MAX], float inverse[MAX][MAX], int n) {
    int det = determinant(matrix, n);

    if (det == 0) {
        printf("Inverse does not exist (determinant is 0)\n");
        return 0;  // Inverse does not exist if determinant is 0
    }

    // Find the adjoint of the matrix
    int adj[MAX][MAX];
    adjoint(matrix, adj, n);

    // Divide the adjoint matrix by the determinant to get the inverse
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            inverse[i][j] = adj[i][j] / (float)det;
        }
    }

    return 1;
}

// Function to print a matrix
void printMatrix(int matrix[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

// Function to print a float matrix (for inverse)
void printFloatMatrix(float matrix[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%.2f ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int matrix[MAX][MAX], n;
    float inv[MAX][MAX];

    // Get the size of the matrix (n x n)
    printf("Enter the size of the matrix (n x n): ");
    scanf("%d", &n);

    // Ensure it's a square matrix
    if (n > MAX) {
        printf("Matrix size exceeds the maximum allowed size of %d x %d.\n", MAX, MAX);
        return -1;
    }

    // Get the elements of the matrix
    printf("Enter the elements of the matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &matrix[i][j]);
        }
    }

    // Print the matrix
    printf("\nMatrix:\n");
    printMatrix(matrix, n);

    // Find and print the inverse of the matrix
    if (inverse(matrix, inv, n)) {
        printf("\nInverse of the matrix:\n");
        printFloatMatrix(inv, n);
    }

    return 0;
}
